{"remainingRequest":"/home/user/Work/ethsender/node_modules/babel-loader/lib/index.js!/home/user/Work/ethsender/node_modules/ts-loader/index.js??ref--15-2!/home/user/Work/ethsender/node_modules/eslint-loader/index.js??ref--14-0!/home/user/Work/ethsender/src/utils/getAccount.ts","dependencies":[{"path":"/home/user/Work/ethsender/src/utils/getAccount.ts","mtime":1643140018821},{"path":"/home/user/Work/ethsender/babel.config.js","mtime":1643121690025},{"path":"/home/user/Work/ethsender/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/Work/ethsender/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/user/Work/ethsender/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/user/Work/ethsender/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3VzZXIvV29yay9ldGhzZW5kZXIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCB7IHJlZiB9IGZyb20gJ3Z1ZSc7CmltcG9ydCB7IHdlYjMgfSBmcm9tICcuL3dlYjMnOwppbXBvcnQgeyBBQ0NFUFRfTkVUV09SSyB9IGZyb20gJy4uL2NvbnN0YW50cy9uZXR3b3JrJzsgLy8gZGF0YQoKZXhwb3J0IHZhciBhY2NvdW50ID0gcmVmKG51bGwpOwpleHBvcnQgdmFyIG5ldHdvcmsgPSByZWYobnVsbCk7IC8vIG1ldGhvZHMKCmV4cG9ydCB2YXIgZ2V0QWNjb3VudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICB2YXIgYWRkcmVzc2VzLCBiYWxhbmNlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5ldGhlcmV1bS5yZXF1ZXN0KHsKICAgICAgICAgICAgICBtZXRob2Q6ICdldGhfcmVxdWVzdEFjY291bnRzJwogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIGFkZHJlc3NlcyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICByZXR1cm4gd2ViMy5ldGguZ2V0QmFsYW5jZShhZGRyZXNzZXNbMF0pOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgYmFsYW5jZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICByZXR1cm4gY2hlY2tOZXR3b3JrKCk7CgogICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICBhY2NvdW50LnZhbHVlID0gewogICAgICAgICAgICAgIGFkZHJlc3M6IGFkZHJlc3Nlc1swXSwKICAgICAgICAgICAgICBiYWxhbmNlOiBiYWxhbmNlLAogICAgICAgICAgICAgIGh1bWFuaXplZEJhbGFuY2U6IHdlYjMudXRpbHMuZnJvbVdlaShTdHJpbmcoYmFsYW5jZSkpCiAgICAgICAgICAgIH07CgogICAgICAgICAgY2FzZSA5OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIGdldEFjY291bnQoKSB7CiAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKZXhwb3J0IHZhciBjaGVja05ldHdvcmsgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIobmV0d29ya0lkKSB7CiAgICB2YXIgY3VycmVudE5ldHdvcmtJZDsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUUklHR0VSRUQnKTsKICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gTnVtYmVyOwogICAgICAgICAgICBfY29udGV4dDIudDEgPSBuZXR3b3JrSWQ7CgogICAgICAgICAgICBpZiAoX2NvbnRleHQyLnQxKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA3OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgIHJldHVybiB3ZWIzLmV0aC5uZXQuZ2V0SWQoKTsKCiAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIF9jb250ZXh0Mi50MSA9IF9jb250ZXh0Mi5zZW50OwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQyLnQyID0gX2NvbnRleHQyLnQxOwogICAgICAgICAgICBjdXJyZW50TmV0d29ya0lkID0gKDAsIF9jb250ZXh0Mi50MCkoX2NvbnRleHQyLnQyKTsKICAgICAgICAgICAgY29uc29sZS5sb2coQUNDRVBUX05FVFdPUksuaWQpOwogICAgICAgICAgICBjb25zb2xlLmxvZyhjdXJyZW50TmV0d29ya0lkKTsKICAgICAgICAgICAgbmV0d29yay52YWx1ZSA9IHsKICAgICAgICAgICAgICBpZDogY3VycmVudE5ldHdvcmtJZCwKICAgICAgICAgICAgICBpc0NvcnJlY3ROZXR3b3JrOiBBQ0NFUFRfTkVUV09SSy5pZCA9PT0gY3VycmVudE5ldHdvcmtJZAogICAgICAgICAgICB9OwogICAgICAgICAgICBjb25zb2xlLmxvZyhuZXR3b3JrKTsKCiAgICAgICAgICAgIGlmIChuZXR3b3JrSWQpIHsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE1OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgQUNDRVBUX05FVFdPUksuaWQgPT09IGN1cnJlbnROZXR3b3JrSWQpOwoKICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUyKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiBjaGVja05ldHdvcmsoX3gpIHsKICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKZXhwb3J0IHZhciBhZGROZXR3b3JrTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGROZXR3b3JrTGlzdGVuZXIoKSB7CiAgY29uc29sZS5sb2coJ25ldHdvcmtfbGlzdGVuZXInKTsKICB3aW5kb3cuZXRoZXJldW0ub24oJ25ldHdvcmtDaGFuZ2VkJywgLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgIHZhciBfcmVmMyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMobmV0d29ya0lkKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBjaGVja05ldHdvcmsobmV0d29ya0lkKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUzKTsKICAgIH0pKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gKF94MikgewogICAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpKTsKfTs="},{"version":3,"sources":["/home/user/Work/ethsender/node_modules/eslint-loader/index.js??ref--14-0!/home/user/Work/ethsender/src/utils/getAccount.ts"],"names":[],"mappings":";;;AAEA,SAAS,GAAT,QAAoB,KAApB;AACA,SAAS,IAAT,QAAqB,QAArB;AACA,SAAS,cAAT,QAA+B,sBAA/B,C,CAEA;;AACA,OAAO,IAAM,OAAO,GAAG,GAAG,CAAiB,IAAjB,CAAnB;AACP,OAAO,IAAM,OAAO,GAAG,GAAG,CAAwB,IAAxB,CAAnB,C,CAEP;;AACA,OAAO,IAAM,UAAU;AAAA,qEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACe,MAAM,CAAC,QAAP,CAAgB,OAAhB,CAAwB;AAC7D,cAAA,MAAM,EAAE;AADqD,aAAxB,CADf;;AAAA;AAClB,YAAA,SADkB;AAAA;AAAA,mBAKM,IAAI,CAAC,GAAL,CAAS,UAAT,CAAoB,SAAS,CAAC,CAAD,CAA7B,CALN;;AAAA;AAKlB,YAAA,OALkB;AAAA;AAAA,mBAMlB,YAAY,EANM;;AAAA;AAQxB,YAAA,OAAO,CAAC,KAAR,GAAgB;AACd,cAAA,OAAO,EAAE,SAAS,CAAC,CAAD,CADJ;AAEd,cAAA,OAAO,EAAE,OAFK;AAGd,cAAA,gBAAgB,EAAE,IAAI,CAAC,KAAL,CAAW,OAAX,CAAmB,MAAM,CAAC,OAAD,CAAzB;AAHJ,aAAhB;;AARwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAV,UAAU;AAAA;AAAA;AAAA,GAAhB;AAeP,OAAO,IAAM,YAAY;AAAA,sEAAG,kBAAO,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1B,YAAA,OAAO,CAAC,GAAR,CAAY,WAAZ;AAD0B,2BAED,MAFC;AAAA,2BAEM,SAFN;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEyB,IAAI,CAAC,GAAL,CAAS,GAAT,CAAa,KAAb,EAFzB;;AAAA;AAAA;;AAAA;AAAA;AAEpB,YAAA,gBAFoB;AAI1B,YAAA,OAAO,CAAC,GAAR,CAAY,cAAc,CAAC,EAA3B;AACA,YAAA,OAAO,CAAC,GAAR,CAAY,gBAAZ;AAEA,YAAA,OAAO,CAAC,KAAR,GAAgB;AACd,cAAA,EAAE,EAAE,gBADU;AAEd,cAAA,gBAAgB,EAAE,cAAc,CAAC,EAAf,KAAsB;AAF1B,aAAhB;AAKA,YAAA,OAAO,CAAC,GAAR,CAAY,OAAZ;;AAZ0B,gBAcrB,SAdqB;AAAA;AAAA;AAAA;;AAAA,8CAejB,cAAc,CAAC,EAAf,KAAsB,gBAfL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZ,YAAY;AAAA;AAAA;AAAA,GAAlB;AAmBP,OAAO,IAAM,kBAAkB,GAAG,SAArB,kBAAqB,GAAK;AACrC,EAAA,OAAO,CAAC,GAAR,CAAY,kBAAZ;AACA,EAAA,MAAM,CAAC,QAAP,CAAgB,EAAhB,CAAmB,gBAAnB;AAAA,wEAAqC,kBAAO,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC7B,YAAY,CAAC,SAAD,CADiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArC;;AAAA;AAAA;AAAA;AAAA;AAGD,CALM","sourcesContent":["import { Account } from '../interfaces/Account'\nimport { CurrentNetwork } from '../interfaces/Network'\nimport { ref } from 'vue'\nimport { web3 } from './web3'\nimport { ACCEPT_NETWORK } from '../constants/network'\n\n// data\nexport const account = ref<Account | null>(null)\nexport const network = ref<CurrentNetwork | null>(null)\n\n// methods\nexport const getAccount = async () => {\n  const addresses: Array<string> = await window.ethereum.request({\n    method: 'eth_requestAccounts'\n  })\n\n  const balance: string = await web3.eth.getBalance(addresses[0])\n  await checkNetwork()\n\n  account.value = {\n    address: addresses[0],\n    balance: balance,\n    humanizedBalance: web3.utils.fromWei(String(balance))\n  }\n}\n\nexport const checkNetwork = async (networkId?: number):Promise<boolean> => {\n  console.log('TRIGGERED')\n  const currentNetworkId = Number(networkId || await web3.eth.net.getId())\n\n  console.log(ACCEPT_NETWORK.id)\n  console.log(currentNetworkId)\n\n  network.value = {\n    id: currentNetworkId,\n    isCorrectNetwork: ACCEPT_NETWORK.id === currentNetworkId\n  }\n\n  console.log(network)\n\n  if (!networkId) {\n    return ACCEPT_NETWORK.id === currentNetworkId\n  }\n}\n\nexport const addNetworkListener = () => {\n  console.log('network_listener')\n  window.ethereum.on('networkChanged', async (networkId: number) => {\n    await checkNetwork(networkId)\n  })\n}\n"],"sourceRoot":""}]}