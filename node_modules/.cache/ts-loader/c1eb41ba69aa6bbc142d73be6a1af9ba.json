{"remainingRequest":"/home/user/Work/ethsender/node_modules/babel-loader/lib/index.js!/home/user/Work/ethsender/node_modules/ts-loader/index.js??ref--15-2!/home/user/Work/ethsender/node_modules/eslint-loader/index.js??ref--14-0!/home/user/Work/ethsender/src/utils/network.ts","dependencies":[{"path":"/home/user/Work/ethsender/src/utils/network.ts","mtime":1643209743819},{"path":"/home/user/Work/ethsender/babel.config.js","mtime":1643121690025},{"path":"/home/user/Work/ethsender/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user/Work/ethsender/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/user/Work/ethsender/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/user/Work/ethsender/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/user/Work/ethsender/node_modules/eslint-loader/index.js??ref--14-0!/home/user/Work/ethsender/src/utils/network.ts"],"names":[],"mappings":"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","sourcesContent":["import { CurrentNetwork, Transaction } from '../interfaces/Network'\nimport { ref } from 'vue'\nimport { web3, fromWei, toWei, fromWeiToGwei } from './web3'\nimport { ACCEPT_NETWORK } from '../constants/network'\nimport { getAccount, updateBalance } from './getAccount'\nimport { createNotification } from '../utils/notification'\n\nexport const network = ref<CurrentNetwork | null>(null)\nexport const transaction = ref<Transaction>({\n  from: '',\n  to: '',\n  value: '',\n  txProcessing: false\n})\n\nexport const checkNetwork = async (networkId?: number):Promise<boolean> => {\n  const currentNetworkId = Number(networkId || await web3.eth.net.getId())\n\n  network.value = {\n    id: currentNetworkId,\n    isCorrectNetwork: ACCEPT_NETWORK.id === currentNetworkId\n  }\n  await checkGasPrice()\n\n  if (!networkId) {\n    return ACCEPT_NETWORK.id === currentNetworkId\n  }\n}\n\nexport const addNetworkListener = () => {\n  window.ethereum.on('networkChanged', async (networkId: number) => {\n    await checkNetwork(networkId)\n    await getAccount()\n  })\n}\n\nexport const checkGasPrice = async () => {\n  network.value.gasPrice = await web3.eth.getGasPrice()\n  network.value.humanizedGasPrice = fromWeiToGwei(network.value.gasPrice)\n}\n\nexport const sendTransaction = async ({ from, to, value }:Transaction) => {\n  const expectedBlockTime = 1000\n  transaction.value = {\n    from,\n    to,\n    value,\n    txProcessing: true\n  }\n  return await web3.eth.sendTransaction({\n    from: from,\n    to: to,\n    value: toWei(value, 'ether')\n  } as Transaction, async (err, transactionHash) => {\n    if (err) {\n      transaction.value.txProcessing = false\n      createNotification({ type: 'error', message: err.message })\n    } else {\n      console.log('Submitted transaction with hash: ', transactionHash)\n      transaction.value.hash = transactionHash\n      let transactionReceipt = null\n      while (transactionReceipt == null) { // Waiting expectedBlockTime until the transaction is mined\n        transactionReceipt = await web3.eth.getTransactionReceipt(transactionHash)\n        await new Promise(resolve => setTimeout(resolve, expectedBlockTime))\n      }\n      transaction.value.txProcessing = false\n      createNotification({ type: 'success', message:  `Tx #${transactionHash} confirmed` })\n      await updateBalance()\n      console.log('Got the transaction receipt: ', transactionReceipt)\n    }\n  })\n}\n"],"sourceRoot":""}]}